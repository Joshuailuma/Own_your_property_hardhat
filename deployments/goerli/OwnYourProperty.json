{
  "address": "0x9FD6daD42ee865E288914A8845D8e8b1fE8D4cda",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MyProperty",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "transferItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a0fa62116309c96e4b6f114b1b094ab4670070734ffe57970fc3332a48df72e",
  "receipt": {
    "to": null,
    "from": "0xA6bDf2927d3D88d3B2E5d166E60FE660b9f52102",
    "contractAddress": "0x9FD6daD42ee865E288914A8845D8e8b1fE8D4cda",
    "transactionIndex": 109,
    "gasUsed": "195361",
    "logsBloom": "0x
    "blockHash": "0x6dc09fe1a60f1c2f07e9336f8814ec2f0bd3acc89d058a3f2addfe4e8f2d7562",
    "transactionHash": "0x2a0fa62116309c96e4b6f114b1b094ab4670070734ffe57970fc3332a48df72e",
    "logs": [],
    "blockNumber": 8197737,
    "cumulativeGasUsed": "19302271",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "907d50f1dc561ca72695f85d3b110cca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MyProperty\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"transferItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransferProperty.sol\":\"TransferProperty\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TransferProperty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract TransferProperty {\\n    event ItemSold(\\n        address indexed buyer,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    event MyProperty(\\n        address indexed owner,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    address seller; // Person that want to sell his property\\n\\n    //A mapping\\n    // Contract Address -> NFT TokenID -> Listing\\n    // mapping(address => mapping(uint256 => seller)) private s_listings;\\n\\n    //To see if item is listed\\n    // modifier isListed(address nftAddress, uint256 tokenId) {\\n    //     Listing memory listing = s_listings[nftAddress][tokenId];\\n    // }\\n\\n    /*\\n     * @notice Method to transfer listed property\\n     * @param nftAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT\\n     */\\n    function transferItem(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address buyer\\n    ) external {\\n        // Listing memory listedItem = s_listings[nftAddress][tokenId];\\n\\n        // delete (s_listings[nftAddress][tokenId]); // Delete it from the listing list\\n        // Transfer the property\\n        IERC721(nftAddress).safeTransferFrom(msg.sender, buyer, tokenId);\\n        emit ItemSold(msg.sender, buyer, tokenId); // EMit the stuff\\n    }\\n}\\n\",\"keccak256\":\"0xe0f77141c25db4d4dee2fbc77731f456717e6c5e50ed99c44c144e693e25ea95\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610292806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806399ef76a014610030575b600080fd5b61004a600480360381019061004591906101b4565b61004c565b005b8273ffffffffffffffffffffffffffffffffffffffff166342842e0e3383856040518463ffffffff1660e01b815260040161008993929190610225565b600060405180830381600087803b1580156100a357600080fd5b505af11580156100b7573d6000803e3d6000fd5b50505050818173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f46782f0e6d78441c8eb94ae065d50ff717ce627040111c23f781e52b94b79d8360405160405180910390a4505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014b82610120565b9050919050565b61015b81610140565b811461016657600080fd5b50565b60008135905061017881610152565b92915050565b6000819050919050565b6101918161017e565b811461019c57600080fd5b50565b6000813590506101ae81610188565b92915050565b6000806000606084860312156101cd576101cc61011b565b5b60006101db86828701610169565b93505060206101ec8682870161019f565b92505060406101fd86828701610169565b9150509250925092565b61021081610140565b82525050565b61021f8161017e565b82525050565b600060608201905061023a6000830186610207565b6102476020830185610207565b6102546040830184610216565b94935050505056fea2646970667358221220b7747dacebdf49d4a310abc54d30b8f74bdf56e2aced4081875736ce5c65675864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806399ef76a014610030575b600080fd5b61004a600480360381019061004591906101b4565b61004c565b005b8273ffffffffffffffffffffffffffffffffffffffff166342842e0e3383856040518463ffffffff1660e01b815260040161008993929190610225565b600060405180830381600087803b1580156100a357600080fd5b505af11580156100b7573d6000803e3d6000fd5b50505050818173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f46782f0e6d78441c8eb94ae065d50ff717ce627040111c23f781e52b94b79d8360405160405180910390a4505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014b82610120565b9050919050565b61015b81610140565b811461016657600080fd5b50565b60008135905061017881610152565b92915050565b6000819050919050565b6101918161017e565b811461019c57600080fd5b50565b6000813590506101ae81610188565b92915050565b6000806000606084860312156101cd576101cc61011b565b5b60006101db86828701610169565b93505060206101ec8682870161019f565b92505060406101fd86828701610169565b9150509250925092565b61021081610140565b82525050565b61021f8161017e565b82525050565b600060608201905061023a6000830186610207565b6102476020830185610207565b6102546040830184610216565b94935050505056fea2646970667358221220b7747dacebdf49d4a310abc54d30b8f74bdf56e2aced4081875736ce5c65675864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2679,
        "contract": "contracts/TransferProperty.sol:TransferProperty",
        "label": "seller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}