{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "propertyAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemSold",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "propertyAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "propertyAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "transferItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfcfb52323bbaf0dd5f5134168e27baa882729b43e88717641cc007dc027e9b49",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "330124",
    "logsBloom": "0x
    "blockHash": "0x5804ae27498d13a1d12c9737f5de5478faa13157818bdc5e6388fd23da4acf86",
    "transactionHash": "0xfcfb52323bbaf0dd5f5134168e27baa882729b43e88717641cc007dc027e9b49",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "330124",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e794728ca48a39b80a290d1d505773ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"propertyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"propertyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"propertyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"transferItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransferProperty.sol\":\"TransferProperty\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/TransferProperty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract TransferProperty {\\n    error NotOwner();\\n\\n    // New Buyer is the ownerAddress\\n    event ItemSold(\\n        address indexed ownerAddress,\\n        address indexed propertyAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    modifier isOwner(\\n        address propertyAddress,\\n        uint256 tokenId,\\n        address seller\\n    ) {\\n        IERC721 nft = IERC721(propertyAddress);\\n        address owner = nft.ownerOf(tokenId);\\n        if (seller != owner) {\\n            revert NotOwner();\\n        }\\n        _;\\n    }\\n\\n    /*\\n     * @notice Method to transfer listed property\\n     * @param propertyAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT/property\\n     */\\n    function transferItem(\\n        address propertyAddress,\\n        uint256 tokenId,\\n        address ownerAddress\\n    ) external isOwner(propertyAddress, tokenId, msg.sender) {\\n        // Transfer the property\\n        IERC721(propertyAddress).safeTransferFrom(\\n            msg.sender,\\n            ownerAddress,\\n            tokenId\\n        );\\n        emit ItemSold(ownerAddress, propertyAddress, tokenId); // EMit the stuff\\n    }\\n\\n    /*\\n     * @notice Method to check the owner of a property\\n     * @param propertyAddress Address of NFT contract\\n     * @param tokenId Token ID of NFT/property\\n     */\\n    function checkOwner(\\n        address propertyAddress,\\n        uint256 tokenId\\n    ) public view returns (address) {\\n        IERC721 nft = IERC721(propertyAddress);\\n        address owner = nft.ownerOf(tokenId);\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0xb63376da48ab8dd44986d3328299d7459183287f7f7b0087e6bede5ec281088e\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610504806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301cdc3c91461003b57806399ef76a01461006b575b600080fd5b6100556004803603810190610050919061036e565b610087565b60405161006291906103bd565b60405180910390f35b610085600480360381019061008091906103d8565b610116565b005b60008083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016100c8919061043a565b602060405180830381865afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610109919061046a565b9050809250505092915050565b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610159919061043a565b602060405180830381865afa158015610176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019a919061046a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610201576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff166342842e0e33888a6040518463ffffffff1660e01b815260040161023e93929190610497565b600060405180830381600087803b15801561025857600080fd5b505af115801561026c573d6000803e3d6000fd5b50505050868873ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f46782f0e6d78441c8eb94ae065d50ff717ce627040111c23f781e52b94b79d8360405160405180910390a45050505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610305826102da565b9050919050565b610315816102fa565b811461032057600080fd5b50565b6000813590506103328161030c565b92915050565b6000819050919050565b61034b81610338565b811461035657600080fd5b50565b60008135905061036881610342565b92915050565b60008060408385031215610385576103846102d5565b5b600061039385828601610323565b92505060206103a485828601610359565b9150509250929050565b6103b7816102fa565b82525050565b60006020820190506103d260008301846103ae565b92915050565b6000806000606084860312156103f1576103f06102d5565b5b60006103ff86828701610323565b935050602061041086828701610359565b925050604061042186828701610323565b9150509250925092565b61043481610338565b82525050565b600060208201905061044f600083018461042b565b92915050565b6000815190506104648161030c565b92915050565b6000602082840312156104805761047f6102d5565b5b600061048e84828501610455565b91505092915050565b60006060820190506104ac60008301866103ae565b6104b960208301856103ae565b6104c6604083018461042b565b94935050505056fea26469706673582212205e5bd09175ee1710cc99a95612dac4588e1cf68a053b9f400f43ef9c2ad401bf64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806301cdc3c91461003b57806399ef76a01461006b575b600080fd5b6100556004803603810190610050919061036e565b610087565b60405161006291906103bd565b60405180910390f35b610085600480360381019061008091906103d8565b610116565b005b60008083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016100c8919061043a565b602060405180830381865afa1580156100e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610109919061046a565b9050809250505092915050565b828233600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610159919061043a565b602060405180830381865afa158015610176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019a919061046a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610201576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff166342842e0e33888a6040518463ffffffff1660e01b815260040161023e93929190610497565b600060405180830381600087803b15801561025857600080fd5b505af115801561026c573d6000803e3d6000fd5b50505050868873ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f46782f0e6d78441c8eb94ae065d50ff717ce627040111c23f781e52b94b79d8360405160405180910390a45050505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610305826102da565b9050919050565b610315816102fa565b811461032057600080fd5b50565b6000813590506103328161030c565b92915050565b6000819050919050565b61034b81610338565b811461035657600080fd5b50565b60008135905061036881610342565b92915050565b60008060408385031215610385576103846102d5565b5b600061039385828601610323565b92505060206103a485828601610359565b9150509250929050565b6103b7816102fa565b82525050565b60006020820190506103d260008301846103ae565b92915050565b6000806000606084860312156103f1576103f06102d5565b5b60006103ff86828701610323565b935050602061041086828701610359565b925050604061042186828701610323565b9150509250925092565b61043481610338565b82525050565b600060208201905061044f600083018461042b565b92915050565b6000815190506104648161030c565b92915050565b6000602082840312156104805761047f6102d5565b5b600061048e84828501610455565b91505092915050565b60006060820190506104ac60008301866103ae565b6104b960208301856103ae565b6104c6604083018461042b565b94935050505056fea26469706673582212205e5bd09175ee1710cc99a95612dac4588e1cf68a053b9f400f43ef9c2ad401bf64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}